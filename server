#!/usr/bin/gawk -f

END { 
#SÐ•TTINGS

	_RS = RS
	RS = ORS = "\r\n"
	port = 1488
	host = "/inet/tcp/" port "/0/0"  # host string 

#END OF SETTINGS
	while(1){
		receive_http(headers, host)
		err[0] = 0
		if(headers["GET"] != ""){	
			content = read_if_exist(host,headers["GET"],err)
			if(err[1] == 1){
				print "HTTP/1.1 404 Not Found" |& host
				close (host)
				continue
#	terminate(host, 2, "Invalid filename")
			}	
		}
		if(headers["POST"] != ""){
			content = ajax(host,err)	
			if(err[1] == 1){
				print "HTTP/1.1 404 Not Found" |& host
				close (host)
				continue
#	terminate(host, 2, "Invalid filename")
			}	
		}
		content_length = length(content)
		answer_headers = make_a_headers(content_length)	
		print answer_headers ORS content |& host
		close(host)
	}
	terminate(host, 3, "Lyl, how?")
} 

function make_a_headers(content_length,    headers){
	headers = "HTTP/1.1 200 OK" ORS
	headers = headers "Server: gawk-based sh~ made by izoomko" ORS
	headers = headers "Content-length" content_length
	headers = headers "Connection: Keep-Alive" ORS
	"Content-Type: text/html" ORS
	"Content-Language: en" ORS
}

function read_if_exist(host,request,err,         test_result,_RS,tmp,matches){
	_RS = RS
	RS = "\n"
	
	# goto :hell, scriptkiddy!
	matches = match(request, /\.\.\//)
	if(matches != 0){
		RS = _RS
		err[1] = 1
		return ""
	}
	
	tmp = sprintf("test -e %s || echo $?", request) 
	tmp | getline test_result
	close(tmp)
	if(strtonum(test_result) != 0){
		err[1] = 2
		RS = _RS
		return ""
	}

	RS = "^$"
	getline tmp < request
	close(request)
	RS = _RS
	return tmp
}

function ajax(host,err,       received){
	received = receive_content(host)
	print received
	return received
}
function receive_http(headers, host,      str,tmp,matches){
	while(host |& getline str){
		if (str == "")
			break
		matches	= match(str, "^([^:]*): (.*)$", tmp)
		if(matches == 0){
			matches =	match(str, /^([^ ]*) \/(([^. ]*)(\.html|\.css|\.js|\.db)?) HTTP\/1\.1$/, tmp)
			if(tmp[4] == "")
				tmp[2] = tmp[3] "index.html"
			if(matches == 0){
				terminate(host, 1, "Wth, dude? Where is your's valid HTTP heads?");
			}
		}
		headers[tmp[1]] = tmp[2]
	}
}

function receive_content(host, 		info,str){
	info = ""
	while(host |& getline str){
		if (str == "")
			break
		info = info str
	}
	return info
}
function terminate(host, errcode, errmsg){
	print errmsg | "cat 1>&2"
	close(host)
	exit errcode
}

