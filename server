#!/usr/bin/gawk -f


BEGIN { 
#SĞ•TTINGS
	RS = ORS = "\r\n"
	port = 16123
	host = "/inet/tcp/" port "/0/0"  # host string 

#END OF SETTINGS

	receive_handshake(header, host)
	#lets do it
	# 1) Calculate hash
	hash = calculate_hash(header["Sec-WebSocket-Key"]);
	# 2) ????
	# 3) send an answer
	answer_handshake(hash, host)
	FS = RS = ""
#frame = dataframe_encode("Hello")
#	print frame |& host

	frame = dataframe_encode("user")
	printf frame |& host


	answer = ""

	PROCINFO[host, "READ_TIMEOUT"] = 10000
	if((host |& getline) > 0)
		print $0
	else 
		print ERRNO

	data = dataframe_decode(frame,unmasked)

	close(host)
} 


# you must know that client always send masked frames, server always send 
# unmasked frames
function dataframe_encode(payload,    payload_len,bytes,frame){
#
#     0                   1                   2                   3
#      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
#     +-+-+-+-+-------+-+-------------+-------------------------------+
#     |F|R|R|R| opcode|M| Payload len |    Extended payload length    |
#     |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |
#     |N|V|V|V|       |S|             |   (if payload len==126/127)   |
#     | |1|2|3|       |K|             |                               |
#     +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +
#     |     Extended payload length continued, if payload len == 127  |
#     + - - - - - - - - - - - - - - - +-------------------------------+
#     |                               |Masking-key, if MASK set to 1  |
#     +-------------------------------+-------------------------------+
#     | Masking-key (continued)       |          Payload Data         |
#     +-------------------------------- - - - - - - - - - - - - - - - +
#     :                     Payload Data continued ...                :
#     + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
#     |                     Payload Data continued ...                |
#     +---------------------------------------------------------------+
#	81		  84 	    73        e5 		dd        4d 0696 b83f
#	1000 0001|1000 0100|0111 0011|1110 0101|1101 1101|0100
	payload_len = length(payload)
	# final text frame 10000001
	# omfg hack
	bytes[0] = sprintf("\x81")
	#payload length 
	if(payload_len > 125){
		bytes[1] = strtonum(sprintf("%2x", 126))
		bytes[2] = substr(payload_len, 0, 2)
		bytes[3] = substr(payload_len, 3)
		for(i = 0; i < 3; i++){
			frame = frame sprintf("%02x", bytes[i])
		}
		# then skip 4 bytes + 4 bytes + 2 bytes = 10 bytes
		for(i = 0; i < 10; i++){
			frame = frame sprintf("%02x", 0)
		}
	} else {
		bytes[1] = payload_len
		for(i = 1; i < 2; i++){
			frame = frame chr(bytes[i])
		}
	}

	frame = bytes[0] frame payload
	return frame
}

function dataframe_decode(frame,unmasked){
#
#     0                   1                   2                   3
#      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
#     +-+-+-+-+-------+-+-------------+-------------------------------+
#     |F|R|R|R| opcode|M| Payload len |    Extended payload length    |
#     |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |
#     |N|V|V|V|       |S|             |   (if payload len==126/127)   |
#     | |1|2|3|       |K|             |                               |
#     +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +
#     |     Extended payload length continued, if payload len == 127  |
#     + - - - - - - - - - - - - - - - +-------------------------------+
#     |                               |Masking-key, if MASK set to 1  |
#     +-------------------------------+-------------------------------+
#     | Masking-key (continued)       |          Payload Data         |
#     +-------------------------------- - - - - - - - - - - - - - - - +
#     :                     Payload Data continued ...                :
#     + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
#     |                     Payload Data continued ...                |
#     +---------------------------------------------------------------+
	split(frame, bytes, "")
	
	# recognize frame type
	# first byte fin+3byte reserved + opcode
	printf("echo -n ibase=10;obase=2;%d | bc", bytes[0]) |& getline first_byte 	
	printf("%x", first_byte)
		
}

function answer_handshake(hash, host){
	#well, now i need
	# HTTP/1.1 101 Switching Protocols
	# Upgrade: websocket
	# Connection: Upgrade
	# Sec-WebSocket-Accept: HASH
		printf ("HTTP/1.1 101 Switching Protocols" ORS "Upgrade: websocket" ORS "Connection: Upgrade" ORS "Sec-WebSocket-Accept: %s" ORS "Sec-WebSocket-Protocol: chat"ORS ORS, hash) |& host
}

function receive_handshake(headers, host){
	while(host |& getline str){
		if (str == "")
			break
		match(str, "^([^:]*): (.*)$", tmp)
		headers[tmp[1]] = tmp[2]
	}
}

function calculate_hash(key,    magic,cmd,hash){
	magic = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11"
	cmd = sprintf("echo -n '%s' | openssl sha1 -binary | openssl base64", key magic)
	cmd | getline hash
	return substr(hash,0, 28)
}


function chr(c)
{
    # force c to be numeric by adding 0
    return sprintf("%c", c + 0)
}
